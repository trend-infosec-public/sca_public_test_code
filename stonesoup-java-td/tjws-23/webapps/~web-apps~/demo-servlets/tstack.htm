<html>
<!-- $Id: tstack.htm,v 1.3 2005/12/10 05:53:26 rogatkin Exp $ -->
<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Technology Stack</title>
<style>
<!--
td           { font-family: fantasy; font-size: 10pt }
-->
</style>
</head>

<body>

<table border="0" cellpadding="6" cellspacing="0" width="745" height="825">
	<!-- MSTableType="layout" -->
	<tr>
		<td valign="top" colspan="2" height="69">
		<!-- MSCellType="ContentHead" -->
		<h2>Technology Stack</h2>
	</td>
	</tr>
	<tr>
		<td valign="top" rowspan="2" width="151" bgcolor="#FFFFCC">
		<!-- MSCellType="NavBody" -->
		<strong>Architecture</strong><ul>
			<li><font face="Arial" size="2">Frameworks</font></li>
			<li><font face="Arial" size="2">Loose coupling</font></li>
			<li><font face="Arial" size="2">Reusable components</font></li>
		</ul>
		<p>&nbsp;</td>
		<td valign="top" height="46">
		<!-- MSCellType="ContentHead2" -->
		<strong>Chief Software Architect Point of View</strong></td>
	</tr>
	<tr>
		<td valign="top" height="710" width="570">
		<!-- MSCellType="ContentBody" -->
		Smooth, fast, enjoyable and error/bug defended process of development of 
		software is possible when right architecture selected. Frameworks are a 
		basis of fast and bug free software creation. All products share 2 
		frameworks, one is an application framework providing SOA. It contains a 
		service providers registry, a component factory, base services and set 
		of reusable utilities. Second framework&nbsp; plays a similar role for 
		creation of web applications. It can use also the application framework 
		for creation multi services web applications. Supporting MVC helps 
		developers separate presentation and business logic.&nbsp; Using 
		frameworks free developers and designers from thinking about details of 
		life cycle of component, allowing dedicate more time on implementation 
		of functionality. The frameworks are not over complicated, and do not 
		sacrifice 90% of complexity in favor of 1% of functionality. Used 
		approach considers that in case of 1% required functionality can be done 
		in custom code without heaving of frameworks. An interface driven design 
		also allows to replace parts of frameworks easily by more robust or 
		smarter implementations.&nbsp; Commonly, entire architecture is based on 
		using light weight components, keeping just minimal required 
		functionality, and leaving anything extra on usage of a custom code. As 
		was stated above an interface driven design and a loose coupling allows 
		create very different configurations based on set of replaceable and 
		reusable light weight components.<p>7Bee is a sort of exception because 
		doesn't use any framework. It's done to make it very light weight, 
		however it uses fundamental principles and built using SOA. It used as a 
		build tool for all other projects.</p>
		<p>All other projects share the same application framework. Web 
		applications like jAddressBook, ChatHouse, Tree View, and other small 
		demo web projects. Tree View itself shared by all web interfaced 
		projects. </td>
	</tr>
</table>

</body>

</html>
