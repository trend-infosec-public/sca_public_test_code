#
# ngIRCd -- The Next Generation IRC Daemon
# Copyright (c)2001-2004 Alexander Barton <alex@barton.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# Please read the file COPYING, README and AUTHORS for more information.
#
# $Id: configure.in,v 1.102.2.5 2004/12/25 00:20:57 alex Exp $
#

# -- Initialisation --

AC_PREREQ(2.50)
AC_INIT(ngircd, 0.8.1)
AC_CONFIG_SRCDIR(src/ngircd/ngircd.c)
AC_CANONICAL_TARGET
AM_INIT_AUTOMAKE(1.6)
AM_CONFIG_HEADER(src/config.h)

# -- Templates for config.h --

AH_TEMPLATE([DEBUG], [Define if debug-mode should be enabled])
AH_TEMPLATE([HAVE_socklen_t], [Define if socklen_t exists])
AH_TEMPLATE([SNIFFER], [Define if IRC sniffer should be enabled])
AH_TEMPLATE([STRICT_RFC], [Define if ngIRCd should behave strict RFC compliant])
AH_TEMPLATE([SYSLOG], [Define if syslog should be used for logging])
AH_TEMPLATE([ZLIB], [Define if zlib compression should be enabled])
AH_TEMPLATE([TCPWRAP], [Define if TCP wrappers should be used])
AH_TEMPLATE([IRCPLUS], [Define if IRC+ protocol should be used])
AH_TEMPLATE([RENDEZVOUS], [Define if Rendezvous support should be included])
AH_TEMPLATE([IDENTAUTH], [Define if the server should do IDENT requests])

AH_TEMPLATE([TARGET_OS], [Target operating system name])
AH_TEMPLATE([TARGET_VENDOR], [Target system vendor])
AH_TEMPLATE([TARGET_CPU], [Target CPU name])

# -- C Compiler --

AC_PROG_CC

# -- Helper programs --

AC_PROG_AWK
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB

# -- Compiler Features --

AM_C_PROTOTYPES
AC_C_CONST

# -- Hard coded system and compiler dependencies/features/options ... --

if test "$GCC" = "yes"; then
	# We are using the GNU C compiler. Good!
	CFLAGS="$CFLAGS -pipe -W -Wall -Wpointer-arith -Wstrict-prototypes"
fi

case "$target_os" in
	hpux*)
		# This is HP/UX, we need to define _XOPEN_SOURCE_EXTENDED
		# (tested with HP/UX 11.11)
		CFLAGS="$CFLAGS -D_XOPEN_SOURCE_EXTENDED"
		;;
esac

# Add additional CFLAGS, eventually specified on the command line:
test -n "$CFLAGS_ADD" && CFLAGS="$CFLAGS $CFLAGS_ADD"

CFLAGS="$CFLAGS -DSYSCONFDIR='\"\$(sysconfdir)\"'"

# -- Headers --

AC_HEADER_STDC
AC_HEADER_TIME
AC_HEADER_SYS_WAIT

AC_CHECK_HEADERS([ \
	ctype.h errno.h fcntl.h netdb.h netinet/in.h stdlib.h string.h \
	strings.h sys/socket.h sys/time.h unistd.h \
	],,AC_MSG_ERROR([required C header missing!]))

AC_CHECK_HEADERS([arpa/inet.h ctype.h malloc.h stdint.h varargs.h])

# -- Datatypes --

AC_MSG_CHECKING(whether socklen_t exists)
AC_TRY_COMPILE([
	#include <sys/socket.h>
	#include <sys/types.h>
	],[
	socklen_t a, b;
	a = 2; b = 4; a += b;
	],[
	AC_DEFINE(HAVE_socklen_t) AC_MSG_RESULT(yes)
	],[
	AC_MSG_RESULT(no)
])

AC_TYPE_SIGNAL
AC_TYPE_SIZE_T

# -- Libraries --

AC_CHECK_LIB(UTIL,memmove)
AC_CHECK_LIB(socket,bind)
AC_CHECK_LIB(nsl,gethostent)

# -- Functions --

AC_FUNC_FORK
AC_FUNC_STRFTIME

AC_CHECK_FUNCS([ \
	bind gethostbyaddr gethostbyname gethostname inet_ntoa malloc memmove \
	memset realloc setsid setsockopt socket strcasecmp strchr strerror \
	strstr waitpid],,AC_MSG_ERROR([required function missing!]))

AC_CHECK_FUNCS(inet_aton isdigit sigaction snprintf vsnprintf strlcpy strlcat)

AC_CHECK_FUNCS(select,[AC_CHECK_HEADERS(sys/select.h)],
	AC_MSG_ERROR([required function select() is missing!])
)

# -- Configuration options --

x_syslog_on=no
AC_ARG_WITH(syslog,
	[  --without-syslog        disable syslog (autodetected by default)],
	[	if test "$withval" = "yes"; then
			AC_CHECK_LIB(be, syslog)
			AC_CHECK_FUNCS(syslog, x_syslog_on=yes,
				AC_MSG_ERROR([Can't enable syslog!])
			)
		fi
	],
	[
		AC_CHECK_LIB(be, syslog)
		AC_CHECK_FUNCS(syslog, x_syslog_on=yes)
	]
)
if test "$x_syslog_on" = "yes"; then
	AC_DEFINE(SYSLOG, 1)
	AC_CHECK_HEADERS(syslog.h)
fi

x_zlib_on=no
AC_ARG_WITH(zlib,
	[  --without-zlib          disable zlib compression (autodetected by default)],
	[	if test "$withval" = "yes"; then
			AC_CHECK_LIB(z, deflate)
			AC_CHECK_FUNCS(deflate, x_zlib_on=yes,
				AC_MSG_ERROR([Can't enable zlib!])
			)
		fi
	],
	[	AC_CHECK_LIB(z, deflate)
		AC_CHECK_FUNCS(deflate, x_zlib_on=yes)
	]
)
if test "$x_zlib_on" = "yes"; then
	AC_DEFINE(ZLIB, 1)
	AC_CHECK_HEADERS(zlib.h)
fi

x_tcpwrap_on=no
AC_ARG_WITH(tcp-wrappers,
	[  --with-tcp-wrappers     enable TCP wrappers support],
	[	if test "$withval" = "yes"; then
			AC_CHECK_LIB(wrap, tcpd_warn)
			AC_MSG_CHECKING(for hosts_access)
			AC_TRY_LINK([
				#include <tcpd.h>
				],[
				void *ptr;
				ptr = hosts_access;
				],[
				AC_MSG_RESULT(yes)
				AC_DEFINE(TCPWRAP, 1)
				x_tcpwrap_on=yes
				],[
				AC_MSG_RESULT(no)
				AC_MSG_ERROR([Can't enable TCP wrappers!])
			])
		fi
	]
)

x_rendezvous_on=no
AC_ARG_WITH(rendezvous,
	[  --with-rendezvous       enable support for "Rendezvous"],
	[	if test "$withval" = "yes"; then
			AC_CHECK_FUNCS(DNSServiceRegistrationCreate, x_rendezvous_on=yes,
				AC_MSG_ERROR([Can't enable Rendezvous!])
			)
		fi
	]
)
if test "$x_rendezvous_on" = "yes"; then
	AC_DEFINE(RENDEZVOUS, 1)
	AC_CHECK_HEADERS(DNSServiceDiscovery/DNSServiceDiscovery.h mach/port.h)
fi

x_identauth_on=no
AC_ARG_WITH(ident,
	[  --with-ident            enable "IDENT" ("AUTH") protocol support],
	[	if test "$withval" = "yes"; then
			AC_CHECK_LIB(ident, ident_id)
			AC_CHECK_FUNCS(ident_id, x_identauth_on=yes,
				AC_MSG_ERROR([Can't enable IDENT support!])
			)
		fi
	]
)
if test "$x_identauth_on" = "yes"; then
	AC_DEFINE(IDENTAUTH, 1)
	AC_CHECK_HEADERS(ident.h)
fi

x_ircplus_on=yes
AC_ARG_ENABLE(ircplus,
	[  --disable-ircplus       disable IRC+ protocol],
	if test "$enableval" = "no"; then x_ircplus_on=no; fi
)
if test "$x_ircplus_on" = "yes"; then
	AC_DEFINE(IRCPLUS, 1)
fi

x_sniffer_on=no; x_debug_on=no
AC_ARG_ENABLE(sniffer,
	[  --enable-sniffer        enable IRC traffic sniffer (enables debug mode)],
	if test "$enableval" = "yes"; then
		AC_DEFINE(SNIFFER, 1)
		x_sniffer_on=yes; x_debug_on=yes
	fi
)

AC_ARG_ENABLE(debug,
	[  --enable-debug          show additional debug output],
	if test "$enableval" = "yes"; then x_debug_on=yes; fi
)
if test "$x_debug_on" = "yes"; then
	AC_DEFINE(DEBUG, 1)
	test "$GCC" = "yes" && CFLAGS="-pedantic $CFLAGS"
fi

x_strict_rfc_on=no
AC_ARG_ENABLE(strict-rfc,
	[  --enable-strict-rfc     strict RFC conformance -- may break clients!],
	if test "$enableval" = "yes"; then
		AC_DEFINE(STRICT_RFC, 1)
		x_strict_rfc_on=yes
	fi
)

# -- Definitions --

AC_DEFINE_UNQUOTED(TARGET_CPU, "$target_cpu" )
AC_DEFINE_UNQUOTED(TARGET_VENDOR, "$target_vendor" )
AC_DEFINE_UNQUOTED(TARGET_OS, "$target_os" )

# Add additional CFLAGS, eventually specified on the command line, but after
# running this configure script. Useful for "-Werror" for example.
test -n "$CFLAGS_END" && CFLAGS="$CFLAGS $CFLAGS_END"

# -- Generate files --

AC_OUTPUT([ \
	Makefile \
	doc/Makefile \
	src/Makefile \
	src/portab/Makefile \
	src/tool/Makefile \
	src/ngircd/Makefile \
	src/testsuite/Makefile \
	man/Makefile \
	contrib/Makefile \
	contrib/Debian/Makefile \
	contrib/MacOSX/Makefile \
])

type dpkg >/dev/null 2>&1
if test $? -eq 0; then
	# Generate debian/ link if the dpkg command exists
	# (read: if we are running on a debian compatible system)
	echo "creating Debian-specific links ..."
	test -f debian/rules || ln -s contrib/Debian debian
fi

# -- Result --

echo
echo "ngIRCd has been configured with the following options:"
echo

# Someone please show me a better way :)  [borrowed by OpenSSH]
B=`eval echo ${bindir}` ; B=`eval echo ${B}`
S=`eval echo ${sbindir}` ; S=`eval echo ${S}`
C=`eval echo ${sysconfdir}` ; C=`eval echo ${C}`
M=`eval echo ${mandir}` ; M=`eval echo ${M}`
D=`eval echo ${datadir}/doc/${PACKAGE}` ; D=`eval echo ${D}`

echo "             Target: ${target}"
test "$target" != "$host" && echo "               Host: ${host}"
echo "           Compiler: ${CC}"
test -n "$CFLAGS"	&& echo "     Compiler flags: ${CFLAGS}"
test -n "$CPPFLAGS"	&& echo " Preprocessor flags: ${CPPFLAGS}"
test -n "$LDFLAGS"	&& echo "       Linker flags: ${LDFLAGS}"
test -n "$LIBS"		&& echo "          Libraries: ${LIBS}"
echo
echo "    'ngircd' binary: $S"
echo " Configuration file: $C"
echo "       Manual pages: $M"
echo "      Documentation: $D"
echo

echo $ECHO_N "     Syslog support: $ECHO_C"
test "$x_syslog_on" = "yes" \
	&& echo $ECHO_N "yes $ECHO_C" \
	|| echo $ECHO_N "no  $ECHO_C"
echo $ECHO_N "  Enable debug code: $ECHO_C"
test "$x_debug_on" = "yes" \
	&& echo "yes" \
	|| echo "no"

echo $ECHO_N "   zlib compression: $ECHO_C"
test "$x_zlib_on" = "yes" \
	&& echo $ECHO_N "yes $ECHO_C" \
	|| echo $ECHO_N "no  $ECHO_C"
echo $ECHO_N "        IRC sniffer: $ECHO_C"
test "$x_sniffer_on" = "yes" \
	&& echo "yes" \
	|| echo "no"

echo $ECHO_N "   Use TCP Wrappers: $ECHO_C"
test "$x_tcpwrap_on" = "yes" \
	&& echo $ECHO_N "yes $ECHO_C" \
	|| echo $ECHO_N "no  $ECHO_C"
echo $ECHO_N "    Strict RFC mode: $ECHO_C"
test "$x_strict_rfc_on" = "yes" \
	&& echo "yes" \
	|| echo "no"

echo $ECHO_N " Rendezvous support: $ECHO_C"
test "$x_rendezvous_on" = "yes"	\
	&& echo $ECHO_N "yes $ECHO_C" \
	|| echo $ECHO_N "no  $ECHO_C"
echo $ECHO_N "      IRC+ protocol: $ECHO_C"
test "$x_ircplus_on" = "yes" \
	&& echo "yes" \
	|| echo "no"

echo $ECHO_N "      IDENT support: $ECHO_C"
test "$x_identauth_on" = "yes" \
	&& echo $ECHO_N "yes $ECHO_C" \
	|| echo $ECHO_N "no  $ECHO_C"

echo; echo

# -eof-
